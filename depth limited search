from collections import defaultdict 
  
class Graph: 
    def __init__(self,vertices): 
        self.V = vertices              
        self.graph = defaultdict(list) 
   
    def addEdge(self,u,v):      
        self.graph[u].append(v) 
        
    def DLS(self,source,target,maxDepth):    
        if source == target : return True
  
        if maxDepth <= 0 : return False      
  	   # recursively traversing the graph while searching
        for i in self.graph[source]: 
                if(self.DLS(i, target, maxDepth-1)):     
                    return True
        return False
 
g = Graph(9)# creating the graph 
g.addEdge(0, 1) 
g.addEdge(0, 2) 
g.addEdge(1, 3) 
g.addEdge(1, 4) 
g.addEdge(2, 5) 
g.addEdge(2, 6) 
g.addEdge(3,7)
g.addEdge(3,8)
  
target = 3
maxDepth = 3
source = 0
  
if g.DLS(source, target, maxDepth) == True:
    print(f"Target {target} is reachable from source {source} within max depth {maxDepth}")
else: 
    print(f"Target {target} is NOT reachable from source {source} within max depth {maxDepth}")
    
    
    
 Heuristics.txt

Arad, 366
Bucharest, 0
Craiova, 160
Dobreta, 242
Eforie, 161
Fagaras, 176
Giurgiu, 77
Hirsowa, 151
Lasi, 226
Lugoj, 244
Mehadia, 241
Neamt, 234
Oradea, 380
Pitesti, 100
Rimnicu Vilcea, 193
Sibiu, 253
Timisoara, 329
Urziceni, 80
Vaslui, 199
Zerind, 374

Paths.txt
Arad, Zerind, 75
Arad, Sibiu, 140
Arad, Timisoara, 118
Zerind, Oradea, 71
Oradea, Sibiu, 151
Timisoara, Lugoj, 111
Sibiu, Fagaras, 99
Sibiu, Rimnicu Vilcea, 80
Lugoj, Mehadia, 70
Fagaras, Bucharest, 211
Rimnicu Vilcea, Pitesti, 97
Rimnicu Vilcea, Craiova, 146
Mehadia, Dobreta, 75
Bucharest, Pitesti, 101
Bucharest, Urziceni, 85
Bucharest, Giurgiu, 90
Pitesti, Craiova, 138
Craiova, Dobreta, 120
Urziceni, Hirsova, 98
Urziceni, Vaslui, 142
Hirsova, Eforie, 86
Vaslui, Lasi, 92
Lasi, Neamt, 87
 

